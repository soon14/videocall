Compile and run server with "npm start".
Compile and watch client script with "npm run compile-client"

RTCRtpSender objects for video and audio are added to the RTCPeerConnection object.

Only one videostream is transmitted at the same time, either camera or screen.
In case both camera and screensharing are on, screensharing has priority above camera.
When screensharing is turned off, camera will take its place automatically (if enabled).

Connection is not allowed without audio stream.

After creating a peer connection, nothing happens yet.
After adding a track, negotiationneeded is triggered. Here we should exchange sdp's to tell each other about new tracks.
New tracks arrive in the onTrack event handler. Instead of using individual tracks, we use the MediaStream
    which contains the new track, plus any others that is still being transmitted. It's basically a copy of the
    sender's local MediaStream object, who's only purpose is to contain tracks that are being transmitted.

    That is to say, we do not send audioStream or videoStream, because one or both may be turned off. The localStream
    object only contains tracks that are currently active.